#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('serverciy:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var models = require('../db/models');

var User = require('../db/models').User;

var Category = require('../db/models').Category;



var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


var CategoryController = require('../controllers/CategoryController');


var UserController = require('../controllers/UserController');

/**
 * Listen on provided port, on all network interfaces.
 */



 var io = require('socket.io')(server);



// /{force:true}
models.sequelize.sync({force:true}).then(function() {

    // User.hasMany (Category, { joinTableName: 'UserCategory' });
    // Category.hasMany (User, { joinTableName: 'UserCategory' });



    server.listen(3000, function() {
        debug('Express server listening on port ' + server.address().port);
    });

    server.on('error', onError);
    server.on('listening', onListening);

    io.on('connection', function(socket){

        console.log('a user connected');
        // CategoryController.returnAllCategories().then(function (categories) {
        //     socket.emit('getAllCategories', categories);
        //     }
        // ,function (reason) {
        //
        //     })

        socket.on('userLogin',function (data) {
            console.log("userLogin Data: " + JSON.stringify(data));
        })


        // socket.on('createNewUser', function (userLogin) {
        //     if (userLogin) {
        //
        //     }
        // })

        // socket.on('registerUser', function (userData) {
        //     if (userData) {
        //
        //     }
        // })

        socket.on('getAllCategories', function (data, res) {
            CategoryController.returnAllCategories().then(function (categories) {
                  if (categories) {
                      res({success: true, msg:categories});
                  }
                },
                function (err) {
                    res({success:true, msg:err});
                })
        })


        socket.on('createNewUser', function (user, res) {

            console.log('create new User' + JSON.stringify(user));

            UserController.registrationNewUser(user).then(function (user) {
                console.log("result registration new user: " + JSON.stringify(user));
                if (user) {
                    res({success: true, msg: user});
                }
            }, function (err) {
                res({success: false, msg: err});
            })


        });

    })


})





/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
